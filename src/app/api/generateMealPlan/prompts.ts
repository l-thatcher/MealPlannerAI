import { MealPlannerFormData } from "@/types/interfaces";

export const getPromptText = (formData: MealPlannerFormData): string => {
    return [
      `Generate a detailed exactly ${formData.days}-day meal plan with exactly ${formData.mealsPerDay} meals per day.`,
      'Do not provide extra or fewer meals or days.',
      'Be creative with the recipes and try to think of original outside-the-box meals each time.',
      'Focus on keeping the type of food in each meal appealing and accurate for the time of day.',
      `Make your MAIN priority keeping the theme of each meaal as close to ${formData.preferredCuisines} as possible.`,
      '',
      'Daily nutritional targets:',
      `- Total Calories: ${formData.calories ? formData.calories : 2200} kcal`,
      `- Protein: ${formData.protein ? formData.protein : 150}g`,
      `- Carbs: ${formData.carbs ? formData.carbs : 200}g`,
      `- Fats: ${formData.fats ? formData.fats : 80}g`,
      '',
      'Requirements:',
      formData.dietaryRestrictions.length ? `- Must follow: ${formData.dietaryRestrictions.join(', ')}` : '',
      formData.preferredCuisines ? `- Include these cuisines: ${formData.preferredCuisines}` : '',
      formData.excludedIngredients ? `- Exclude these ingredients: ${formData.excludedIngredients}` : '',
      `- Cooking skill level: ${formData.skillLevel}`,
      '',
      'Each meal should:',
      '1. Include a descriptive title',
      '2. Have realistic macro distributions',
      `3. Be appropriate for ${formData.skillLevel} skill level`,
      '4. Fit within daily calorie goal when combined',
      '5. Meet all dietary restrictions',
      '',
      `End response with exactly ${formData.days} items inside "days", and exactly ${formData.mealsPerDay} meals per day, no additional objects outside the array.`,
      'Do not include any commentary, filler text, or strings in place of expected objects.',
      'The final output must match the exact JSON structure described. Do not return null or strings inside arrays.',
      '',
      'SHOPPING LIST REQUIREMENTS:',
      '- Create a comprehensive shopping list for all meals',
      '- Include specific quantities for each ingredient',
      '- Group items by category (Produce, Meat, Dairy, Pantry, etc.)',
      '- Consider ingredients that are used in multiple meals',
      '',
      'Format the shopping list neatly with categories and line breaks.',
    ].filter(Boolean).join('\n')
};


export const getSystemPrompt = (formData: MealPlannerFormData): string => {
    return[
    'You are an expert meal planning AI specializing in creating personalized meal plans.',
    'Generate a properly formatted JSON object with no trailing commas, proper nesting, and valid syntax.',
    '',
    'CRITICAL REQUIREMENTS:',
    `- Must have exactly ${formData.days} days in sequential order`,
    `- Each day must have exactly ${formData.mealsPerDay} meals`,
    '- All numbers must be actual numbers not strings',
    '- All arrays must be structured array data numbers not strings',
    '- No comments, trailing commas, or extra whitespace',
    '- Must be valid parseable JSON',
    '- All properties must use double quotes',
    '- Meals array must be properly nested inside each day object',
    '',
    'CRITICAL SHOPPING LIST REQUIREMENTS:',
    '- Include a detailed shopping list with ALL ingredients needed for the meal plan, do not miss or skip any ingredients from ANY of the meals',
    '- Group shopping list items by category (e.g., Produce, Meat, Pantry)',
    '- List quantities for each ingredient',
    '- The shopping list should be stored in the "shoppingList" property as a formatted array the EXACT same format as described',
    '- The shopping list should never be just a string, it must be an array of objects in the layout described',
    '- Do not include any ingredients not used in the recipes in the shopping list meal plan, make sure there is ONLY the ingreedients needed to make all the meals',
    '- Where there are localisations of words, such as an american and english version, ALWAYS show both, e.g. "eggplant/aubergine", do this for the shopping list only',
    '- quantities should be strings, not strings, with appropriate units, e.g. "2 cups", "500 grams", "1 tablespoon", "1 teaspoon", "1/2 cup", "1/4 cup", "1 pinch", "1 dash", "1 sprig", "1 bunch", "1 clove" etc where appropriate',
    '',
    'STRICT FORMAT RULES:',
    'Each day object must look exactly like this:',
    '{',
    '  "day": number,',
    '  "meals": [',
    '    {',
    '      "name": "string",',
    '      "title": "string",',
    '      "cals": number,',
    '      "macros": {',
    '        "p": number,',
    '        "c": number,',
    '        "f": number',
    '      }',
    '      "recipe": "string"',
    '    }',
    '  ]',
    '}',
    '',
    'Each shoppinglist object must look exactly like this:',
    '{',
    '  "category": string,',
    '  "items": [',
    '    {',
    '      "name": "string",',
    '      "quantity": "string",',    
    '    }',
    '  ]',
    '}',
    '',
    ].filter(Boolean).join('\n')
};