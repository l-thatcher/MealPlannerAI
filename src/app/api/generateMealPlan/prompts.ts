import { MealPlannerFormData } from "@/types/interfaces";

export const getUserPrompt = (formData: MealPlannerFormData): string => {
  return [
    `Generate a detailed meal plan for exactly ${formData.days} days.`,
    `Each day must contain exactly ${formData.mealsPerDay} meals.`,
    'Strictly follow these constraints — no more or fewer days or meals.',
    '',
    'Meal names must be generic (e.g., "Breakfast", "Lunch", "Dinner", "Morning Snack", "Afternoon Snack" etc). You can use other names, but they should be fairly unoriginal and not too creative.',
    'Be creative and original with the recipe ideas themselves — make them interesting and varied.',
    'Each meal should be appropriate for the time of day based on conventional expectations.',
    '',
    `The main culinary theme of every meal must be based on: ${formData.preferredCuisines}.`,
    '',
    '🧮 Daily Nutritional Targets:',
    formData.calories ? `- Calories: ${formData.calories} kcal` : '',
    formData.protein ? `- Protein: ${formData.protein} g` : '',
    formData.carbs ? `- Carbohydrates: ${formData.carbs} g` : '',
    formData.fats ? `- Fats: ${formData.fats} g` : '',
    '',
    '⚠️ Additional Requirements:',
    formData.dietaryRestrictions.length ? `- Must follow dietary rules: ${formData.dietaryRestrictions.join(', ')}` : '',
    formData.excludedIngredients ? `- Exclude: ${formData.excludedIngredients}` : '',
    formData.extraInstructions ? `- Make sure to also follow these included instructions: ${formData.extraInstructions}` : '',
    formData.preferredCuisines ? `- Include cuisine types: ${formData.preferredCuisines}` : '',
    `- Recipes must match a ${formData.skillLevel} cooking skill level`,
    '',
    '✅ Each meal must include:',
    '1. A generic name (e.g., Breakfast, Snack)',
    '2. A descriptive title, you can be creative with this, but keep it short',
    '3. Calories as a number (not a string)',
    '4. Macros (protein, carbs, fats) as numeric values',
    '5. follow the extra instructions provided',
    `5. Be appropriate for ${formData.skillLevel} skill level`,
    '6. A recipe as a readable string',
    '',
    `The final output must be a valid JSON object with exactly ${formData.days} days, each containing exactly ${formData.mealsPerDay} meals.`,
    'The JSON must be valid, parseable, and match the expected structure with NO commentary, filler text, extra objects, or deviations.',
    'All entries in the "days" array must be valid objects. Do not use strings or placeholders.',
    'Include a fully-formed shoppingList at the end. Never omit this section.',
    'Once the meal plan is complete generate a 2-3 word title, and brief description of the meal plan, e.g. amount of days, cuisine, diatary restrictions, etc. for use in the description field of the meal plan object.',
    'the title and description should be stored in the planDetails array as strings.',
    '🛒 SHOPPING LIST REQUIREMENTS:',
    '- Must include all ingredients used in the meal plan — no more, no less.',
    '- Ingredients must be grouped by category (e.g., Produce, Meat, Dairy, Pantry).',
    '- Quantities must be strings with units (e.g., "1 cup", "500 grams", "1 tablespoon").',
    '- If an ingredient appears in multiple meals, consolidate into one entry with the total quantity.',
    '- Use both American and British spellings (e.g., "eggplant/aubergine") only in the shopping list.',
    '',
    '⚠️ DO NOT:',
    '- Include any empty arrays or objects',
    '- Include extra keys or random notes',
    '- Use placeholder strings like "null" or "N/A"',
    '- Return strings in place of arrays or numbers',
    '- let extra instructions override the main requirements, MAIN REQUIRMENTS IS THE MEAL PLAN, in the correct format, no matter what do not stray from this',
    'IMPORTANT:',
    `- You must return exactly ${formData.days} full days with ${formData.mealsPerDay} complete meals.`,
    '- Do not return fewer days or meals under any circumstances.',
    '- Include the full "shoppingList" at the end, or the response will be rejected.',
    '- Do not return any partial or incomplete JSON data. Only respond with a valid, complete structure.'
  ].filter(Boolean).join('\n');
};


export const getSystemPrompt = (formData: MealPlannerFormData): string => {
  return [
    'You are an expert meal planning AI. Your job is to produce valid, accurate, fully structured JSON meal plans.',
    '',
    '🧠 SYSTEM RULES:',
    '- Must output valid JSON — parseable, syntactically correct, no trailing commas.',
    '- All values must be properly typed: numbers must be numbers (not strings), strings must be strings.',
    '- Arrays must contain valid structured objects — never plain strings.',
    '- No comments, no explanations, no extra whitespace, no extraneous text before or after the JSON.',
    '- Do not return nulls, placeholders, or undefined fields.',
    '- Under no circumstance should a "day" be a string. Each item in the "days" array must be a valid object as described.',
    '- Do not include unfinished or malformed JSON. If a day cannot be completed, retry the entire output.',
    '🔢 STRUCTURE REQUIREMENTS:',
    `- Must include exactly ${formData.days} objects in the "days" array.`,
    `- Each "day" object must contain exactly ${formData.mealsPerDay} meals.`,
    '- All meals must include valid numeric values for calories and macros.',
    '- No empty "meals" or "items" arrays allowed.',
    '- There must ALWAYS be a description generated as a string field',
    '',
    '📦 SHOPPING LIST RULES:',
    '- Every ingredient used in any recipe must appear in the shopping list.',
    '- If an ingredient is reused, combine quantities under one entry.',
    '- ALWAYS **Avoid any duplicate items** – if an ingredient is used in multiple meals, list it **only once** in the shopping list. THIS IS VERY IMPORTANT',
    '- The shopping list must be stored under the key "shoppingList".',
    '- Group items by category: "Produce", "Meat", "Pantry", "Dairy", etc.',
    '- Quantities must be human-readable strings like "1 cup", "500 grams", "1 tablespoon", etc.',
    '- Ingredients with regionally ambiguous names must show both variants (e.g., "eggplant/aubergine").',
    '',
    `- You MUST return exactly ${formData.days} full day objects, each with exactly ${formData.mealsPerDay} meals.`,
    '- If you cannot complete all days within the response, do not return anything — fail instead.',
    '- The "shoppingList" MUST be present and valid. If it is missing, the result is invalid.',
    '- Do not return partial responses. If the output cannot be completed, do not attempt it.',
    '',
    '🧱 FORMAT EXAMPLES:',
    'Each day object should look like this:',
    `{
  "day": 1,
  "meals": [
    {
      "name": "Lunch",
      "title": "Grilled Chicken and Quinoa Salad",
      "cals": 600,
      "macros": { "p": 40, "c": 50, "f": 20 },
      "recipe": "Grill the chicken. Combine with cooked quinoa, chopped vegetables, and dressing."
    }
  ]
}`,
    '',
    'Each shopping list category should look like this:',
    `{
  "category": "Produce",
  "items": [
    {
      "name": "spinach",
      "quantity": "200 grams"
    },
    {
      "name": "eggplant/aubergine",
      "quantity": "1 medium"
    }
  ]
}`,
    '',
    '💥 CRITICAL: Do not include any fields not shown above. Do not return commentary. Only output valid, strictly typed, schema-compliant JSON.',
  ].join('\n');
};




// OLD PROMPTS
// export const getPromptText = (formData: MealPlannerFormData): string => {
//     return [
//       `Generate a detailed EXACTLY ${formData.days}-day meal plan with EXACTLY ${formData.mealsPerDay} meals per day.`,
//       'Do not provide extra or fewer meals or days.',
//       'Meal names should be fairly unoriginal, like breakfast, lunch, dinner, afternoon snack, morning snack etc. do not be too creative with them.',
//       'Be creative with the recipes and try to think of original outside-the-box meals each time.',
//       'Focus on keeping the type of food in each meal appealing and accurate for the time of day.',
//       `Make your MAIN priority keeping the theme of each meaal as close to ${formData.preferredCuisines} as possible.`,
//       '',
//       'Daily nutritional targets:',
//       `- Total Calories: ${formData.calories ? formData.calories : 2200} kcal`,
//       `- Protein: ${formData.protein ? formData.protein : 150}g`,
//       `- Carbs: ${formData.carbs ? formData.carbs : 200}g`,
//       `- Fats: ${formData.fats ? formData.fats : 80}g`,
//       '',
//       'Requirements:',
//       formData.dietaryRestrictions.length ? `- Must follow: ${formData.dietaryRestrictions.join(', ')}` : '',
//       formData.preferredCuisines ? `- Include these cuisines: ${formData.preferredCuisines}` : '',
//       formData.excludedIngredients ? `- Exclude these ingredients: ${formData.excludedIngredients}` : '',
//       `- Cooking skill level: ${formData.skillLevel}`,
//       '',
//       'Each meal should:',
//       '1. Include a descriptive title',
//       '2. Have realistic macro distributions',
//       `3. Be appropriate for ${formData.skillLevel} skill level`,
//       '4. Fit within daily calorie goal when combined',
//       '5. Meet all dietary restrictions',
//       '',
//       `End response with exactly ${formData.days} items inside "days", and exactly ${formData.mealsPerDay} meals per day, no additional objects outside the array.`,
//       'Do not include any commentary, filler text, or strings in place of expected objects.',
//       'The final output must match the exact JSON structure described. Do not return null or strings inside arrays.',
//       '',
//       'SHOPPING LIST REQUIREMENTS:',
//       '- Create a comprehensive shopping list for all meals',
//       '- Include specific quantities for each ingredient',
//       '- Group items by category (Produce, Meat, Dairy, Pantry, etc.)',
//       '- Consider ingredients that are used in multiple meals',
//       '',
//       'Format the shopping list neatly with categories and line breaks.',
//     ].filter(Boolean).join('\n')
// };


// export const getSystemPrompt = (formData: MealPlannerFormData): string => {
//     return[
//     'You are an expert meal planning AI specializing in creating personalized meal plans.',
//     'Generate a properly formatted JSON object with no trailing commas, proper nesting, and valid syntax.',
//     '',
//     'CRITICAL REQUIREMENTS:',
//     `- Must have exactly ${formData.days} days in sequential order`,
//     `- Each day must have exactly ${formData.mealsPerDay} meals`,
//     '- All numbers must be actual numbers not strings',
//     '- All arrays must be structured array data numbers not strings',
//     '- No comments, trailing commas, or extra whitespace',
//     '- Must be valid parseable JSON',
//     '- All properties must use double quotes',
//     '- Meals array must be properly nested inside each day object',
//     '',
//     'CRITICAL SHOPPING LIST REQUIREMENTS:',
//     '- Include a detailed shopping list with ALL ingredients needed for the meal plan, do not miss or skip any ingredients from ANY of the meals',
//     '- Group shopping list items by category (e.g., Produce, Meat, Pantry)',
//     '- List quantities for each ingredient',
//     '- If an ingredient is used in multiple meals, it should only appear ONCE in the shopping list with the total quantity needed',
//     '- The shopping list should be stored in the "shoppingList" property as a formatted array the EXACT same format as described',
//     '- The shopping list should never be just a string, it must be an array of objects in the layout described',
//     '- Do not include any ingredients not used in the recipes in the shopping list meal plan, make sure there is ONLY the ingreedients needed to make all the meals',
//     '- Where there are localisations of words, such as an american and english version ("Eggplant" and "aubergine" for example), ALWAYS show both with a slash, e.g. "eggplant/aubergine", do this for the shopping list only',
//     '- quantities should be strings, not strings, with appropriate units, e.g. "2 cups", "500 grams", "1 tablespoon", "1 teaspoon", "1/2 cup", "1/4 cup", "1 pinch", "1 dash", "1 sprig", "1 bunch", "1 clove" etc where appropriate',
//     '',
//     'STRICT FORMAT RULES:',
//     'Each day object must look exactly like this:',
//     '{',
//     '  "day": number,',
//     '  "meals": [',
//     '    {',
//     '      "name": "string",',
//     '      "title": "string",',
//     '      "cals": number,',
//     '      "macros": {',
//     '        "p": number,',
//     '        "c": number,',
//     '        "f": number',
//     '      }',
//     '      "recipe": "string"',
//     '    }',
//     '  ]',
//     '}',
//     '',
//     'Each shoppinglist object must look exactly like this:',
//     '{',
//     '  "category": string,',
//     '  "items": [',
//     '    {',
//     '      "name": "string",',
//     '      "quantity": "string",',    
//     '    }',
//     '  ]',
//     '}',
//     '',
//     ].filter(Boolean).join('\n')
// };